--------------------------------------------------------------------
TEST_PrintInfo := false;
//TEST_PrintInfo := true; ---<<<<<<-------------------------------------
--------------------------------------------------------------------
if TEST_PrintInfo then SetVerbosityLevel(99); else SetVerbosityLevel(0); endif;
TEST_NumAssert := 0;

define TEST_ASSERT(A,B)
  toplevel TEST_NumAssert;
  toplevel TEST_PrintInfo;
  incr(ref TEST_NumAssert);
  if TEST_PrintInfo then println "--TEST_NumAssert: ", TEST_NumAssert; EndIf;
  If A<>B Then
    error("TEST: " + Sprint(A) + " <> " + Sprint(B));
  endif;
enddefine; -- TEST_ASSERT
--------------------------------------------------------------------


use TEST_R ::= QQ[c[0..19]];
L :=[
c[1]*c[6]*c[13] +c[1]*c[8]*c[11] -c[1]*c[8]*c[13]*c[18] -c[1]*c[9]*c[13]^2 -c[1]*c[12] -c[1]*c[13]*c[19] +c[1]*c[14]*c[18] +c[1]*c[16] -c[1]*c[18]^2 +c[3]*c[6]*c[11] -c[3]*c[6]*c[13]*c[18] -c[3]*c[7]*c[13]^2 -c[3]*c[8]*c[11]*c[18] +c[3]*c[8]*c[13]^2*c[19] -c[3]*c[8]*c[13]*c[16] +c[3]*c[8]*c[13]*c[18]^2 -2*c[3]*c[9]*c[11]*c[13] +c[3]*c[9]*c[13]^2*c[14] +c[3]*c[9]*c[13]^2*c[18] -c[3]*c[10] -c[3]*c[11]*c[19] +c[3]*c[12]*c[18] -c[3]*c[13]*c[17] +2*c[3]*c[13]*c[18]*c[19] +c[3]*c[14]*c[16] -c[3]*c[14]*c[18]^2 -2*c[3]*c[16]*c[18] +c[3]*c[18]^3,
c[1]*c[7]*c[13] -c[1]*c[8]*c[13]*c[19] +c[1]*c[9]*c[11] -c[1]*c[9]*c[13]*c[14] +c[1]*c[17] -c[1]*c[18]*c[19] +c[3]*c[5]*c[13] -c[3]*c[6]*c[13]*c[19] +c[3]*c[7]*c[11] -c[3]*c[7]*c[13]*c[14] -c[3]*c[8]*c[11]*c[19] +c[3]*c[8]*c[13]*c[14]*c[19] -c[3]*c[8]*c[13]*c[17] +c[3]*c[8]*c[13]*c[18]*c[19] -c[3]*c[9]*c[11]*c[14] -c[3]*c[9]*c[12]*c[13] +c[3]*c[9]*c[13]^2*c[19] +c[3]*c[9]*c[13]*c[14]^2 +c[3]*c[13]*c[19]^2 +c[3]*c[15] -c[3]*c[16]*c[19] -c[3]*c[17]*c[18] +c[3]*c[18]^2*c[19],
c[1]*c[6]*c[11] -c[1]*c[8]*c[13]*c[16] -c[1]*c[9]*c[11]*c[13] -c[1]*c[10] -c[1]*c[11]*c[19] +c[1]*c[14]*c[16] -c[1]*c[16]*c[18] -c[3]*c[6]*c[13]*c[16] -c[3]*c[7]*c[11]*c[13] +c[3]*c[8]*c[11]*c[13]*c[19] -c[3]*c[8]*c[11]*c[16] +c[3]*c[8]*c[13]*c[16]*c[18] -c[3]*c[9]*c[11]^2 +c[3]*c[9]*c[11]*c[13]*c[14] +c[3]*c[9]*c[13]^2*c[16] -c[3]*c[11]*c[17] +c[3]*c[11]*c[18]*c[19] +c[3]*c[12]*c[16] +c[3]*c[13]*c[16]*c[19] -c[3]*c[14]*c[16]*c[18] -c[3]*c[16]^2 +c[3]*c[16]*c[18]^2,
c[1]*c[5]*c[13] +c[1]*c[7]*c[11] -c[1]*c[8]*c[13]*c[17] -c[1]*c[9]*c[12]*c[13] -c[1]*c[12]*c[19] +c[1]*c[14]*c[17] +c[1]*c[15] -c[1]*c[17]*c[18] +c[3]*c[5]*c[11] -c[3]*c[6]*c[13]*c[17] -c[3]*c[7]*c[12]*c[13] -c[3]*c[8]*c[11]*c[17] +c[3]*c[8]*c[12]*c[13]*c[19] -c[3]*c[8]*c[13]*c[15] +c[3]*c[8]*c[13]*c[17]*c[18] -c[3]*c[9]*c[10]*c[13] -c[3]*c[9]*c[11]*c[12] +c[3]*c[9]*c[12]*c[13]*c[14] +c[3]*c[9]*c[13]^2*c[17] -c[3]*c[10]*c[19] +c[3]*c[12]*c[18]*c[19] +c[3]*c[13]*c[17]*c[19] +c[3]*c[14]*c[15] -c[3]*c[14]*c[17]*c[18] -c[3]*c[15]*c[18] -c[3]*c[16]*c[17] +c[3]*c[17]*c[18]^2,
c[1]*c[5]*c[11] -c[1]*c[8]*c[13]*c[15] -c[1]*c[9]*c[10]*c[13] -c[1]*c[10]*c[19] +c[1]*c[14]*c[15] -c[1]*c[15]*c[18] -c[3]*c[6]*c[13]*c[15] -c[3]*c[7]*c[10]*c[13] +c[3]*c[8]*c[10]*c[13]*c[19] -c[3]*c[8]*c[11]*c[15] +c[3]*c[8]*c[13]*c[15]*c[18] -c[3]*c[9]*c[10]*c[11] +c[3]*c[9]*c[10]*c[13]*c[14] +c[3]*c[9]*c[13]^2*c[15] -c[3]*c[10]*c[17] +c[3]*c[10]*c[18]*c[19] +c[3]*c[12]*c[15] +c[3]*c[13]*c[15]*c[19] -c[3]*c[14]*c[15]*c[18] -c[3]*c[15]*c[16] +c[3]*c[15]*c[18]^2,
-c[6]*c[13] -c[8]*c[11] +c[8]*c[13]*c[18] +c[9]*c[13]^2 +c[12] +c[13]*c[19] -c[14]*c[18] -c[16] +c[18]^2,
-c[7]*c[13] +c[8]*c[13]*c[19] -c[9]*c[11] +c[9]*c[13]*c[14] -c[17] +c[18]*c[19],
-c[6]*c[11] +c[8]*c[13]*c[16] +c[9]*c[11]*c[13] +c[10] +c[11]*c[19] -c[14]*c[16] +c[16]*c[18],
-c[5]*c[13] -c[7]*c[11] +c[8]*c[13]*c[17] +c[9]*c[12]*c[13] +c[12]*c[19] -c[14]*c[17] -c[15] +c[17]*c[18],
-c[5]*c[11] +c[8]*c[13]*c[15] +c[9]*c[10]*c[13] +c[10]*c[19] -c[14]*c[15] +c[15]*c[18],
-c[1]*c[7]*c[13] +c[1]*c[8]*c[13]*c[19] -c[1]*c[9]*c[11] +c[1]*c[9]*c[13]*c[14] -c[1]*c[17] +c[1]*c[18]*c[19] -c[3]*c[5]*c[13] +c[3]*c[6]*c[13]*c[19] -c[3]*c[7]*c[11] +c[3]*c[7]*c[13]*c[14] +c[3]*c[8]*c[11]*c[19] -c[3]*c[8]*c[13]*c[14]*c[19] +c[3]*c[8]*c[13]*c[17] -c[3]*c[8]*c[13]*c[18]*c[19] +c[3]*c[9]*c[11]*c[14] +c[3]*c[9]*c[12]*c[13] -c[3]*c[9]*c[13]^2*c[19] -c[3]*c[9]*c[13]*c[14]^2 -c[3]*c[13]*c[19]^2 -c[3]*c[15] +c[3]*c[16]*c[19] +c[3]*c[17]*c[18] -c[3]*c[18]^2*c[19],
c[1]*c[5] -c[1]*c[6]*c[19] -c[1]*c[7]*c[14] +c[1]*c[7]*c[18] +c[1]*c[8]*c[14]*c[19] -c[1]*c[8]*c[17] -c[1]*c[9]*c[12] +c[1]*c[9]*c[13]*c[19] +c[1]*c[9]*c[14]^2 -c[1]*c[9]*c[14]*c[18] +c[1]*c[9]*c[16] +c[1]*c[19]^2 -c[3]*c[5]*c[14] +c[3]*c[5]*c[18] +c[3]*c[6]*c[14]*c[19] -c[3]*c[6]*c[17] -c[3]*c[7]*c[12] +c[3]*c[7]*c[13]*c[19] +c[3]*c[7]*c[14]^2 -c[3]*c[7]*c[14]*c[18] +c[3]*c[7]*c[16] +c[3]*c[8]*c[12]*c[19] -c[3]*c[8]*c[13]*c[19]^2 -c[3]*c[8]*c[14]^2*c[19] +c[3]*c[8]*c[14]*c[17] -c[3]*c[8]*c[15] -c[3]*c[9]*c[10] +c[3]*c[9]*c[11]*c[19] +2*c[3]*c[9]*c[12]*c[14] -c[3]*c[9]*c[12]*c[18] -2*c[3]*c[9]*c[13]*c[14]*c[19] +c[3]*c[9]*c[13]*c[17] -c[3]*c[9]*c[14]^3 +c[3]*c[9]*c[14]^2*c[18] -c[3]*c[9]*c[14]*c[16] -c[3]*c[14]*c[19]^2 +2*c[3]*c[17]*c[19] -c[3]*c[18]*c[19]^2,
-c[1]*c[7]*c[11] +c[1]*c[8]*c[11]*c[19] +c[1]*c[9]*c[11]*c[14] -c[1]*c[9]*c[11]*c[18] +c[1]*c[9]*c[13]*c[16] -c[1]*c[15] +c[1]*c[16]*c[19] -c[3]*c[5]*c[11] +c[3]*c[6]*c[11]*c[19] +c[3]*c[7]*c[11]*c[14] -c[3]*c[7]*c[11]*c[18] +c[3]*c[7]*c[13]*c[16] -c[3]*c[8]*c[11]*c[14]*c[19] +c[3]*c[8]*c[11]*c[17] -c[3]*c[8]*c[13]*c[16]*c[19] +c[3]*c[9]*c[11]*c[12] -c[3]*c[9]*c[11]*c[13]*c[19] -c[3]*c[9]*c[11]*c[14]^2 +c[3]*c[9]*c[11]*c[14]*c[18] -c[3]*c[9]*c[13]*c[14]*c[16] -c[3]*c[11]*c[19]^2 +c[3]*c[16]*c[17] -c[3]*c[16]*c[18]*c[19],
c[1]*c[5]*c[18] -c[1]*c[6]*c[17] -c[1]*c[7]*c[12] +c[1]*c[7]*c[16] +c[1]*c[8]*c[12]*c[19] -c[1]*c[8]*c[15] -c[1]*c[9]*c[10] +c[1]*c[9]*c[12]*c[14] -c[1]*c[9]*c[12]*c[18] +c[1]*c[9]*c[13]*c[17] +c[1]*c[17]*c[19] -c[3]*c[5]*c[12] +c[3]*c[5]*c[16] +c[3]*c[6]*c[12]*c[19] -c[3]*c[6]*c[15] -c[3]*c[7]*c[10] +c[3]*c[7]*c[12]*c[14] -c[3]*c[7]*c[12]*c[18] +c[3]*c[7]*c[13]*c[17] +c[3]*c[8]*c[10]*c[19] -c[3]*c[8]*c[12]*c[14]*c[19] +c[3]*c[8]*c[12]*c[17] -c[3]*c[8]*c[13]*c[17]*c[19] +c[3]*c[9]*c[10]*c[14] -c[3]*c[9]*c[10]*c[18] +c[3]*c[9]*c[11]*c[17] +c[3]*c[9]*c[12]^2 -c[3]*c[9]*c[12]*c[13]*c[19] -c[3]*c[9]*c[12]*c[14]^2 +c[3]*c[9]*c[12]*c[14]*c[18] -c[3]*c[9]*c[12]*c[16] -c[3]*c[9]*c[13]*c[14]*c[17] +c[3]*c[9]*c[13]*c[15] -c[3]*c[12]*c[19]^2 +c[3]*c[15]*c[19] +c[3]*c[17]^2 -c[3]*c[17]*c[18]*c[19],
c[1]*c[5]*c[16] -c[1]*c[6]*c[15] -c[1]*c[7]*c[10] +c[1]*c[8]*c[10]*c[19] +c[1]*c[9]*c[10]*c[14] -c[1]*c[9]*c[10]*c[18] +c[1]*c[9]*c[13]*c[15] +c[1]*c[15]*c[19] -c[3]*c[5]*c[10] +c[3]*c[6]*c[10]*c[19] +c[3]*c[7]*c[10]*c[14] -c[3]*c[7]*c[10]*c[18] +c[3]*c[7]*c[13]*c[15] -c[3]*c[8]*c[10]*c[14]*c[19] +c[3]*c[8]*c[10]*c[17] -c[3]*c[8]*c[13]*c[15]*c[19] +c[3]*c[9]*c[10]*c[12] -c[3]*c[9]*c[10]*c[13]*c[19] -c[3]*c[9]*c[10]*c[14]^2 +c[3]*c[9]*c[10]*c[14]*c[18] -c[3]*c[9]*c[10]*c[16] +c[3]*c[9]*c[11]*c[15] -c[3]*c[9]*c[13]*c[14]*c[15] -c[3]*c[10]*c[19]^2 +c[3]*c[15]*c[17] -c[3]*c[15]*c[18]*c[19],
c[7]*c[13] -c[8]*c[13]*c[19] +c[9]*c[11] -c[9]*c[13]*c[14] +c[17] -c[18]*c[19],
-c[5] +c[6]*c[19] +c[7]*c[14] -c[7]*c[18] -c[8]*c[14]*c[19] +c[8]*c[17] +c[9]*c[12] -c[9]*c[13]*c[19] -c[9]*c[14]^2 +c[9]*c[14]*c[18] -c[9]*c[16] -c[19]^2,
c[7]*c[11] -c[8]*c[11]*c[19] -c[9]*c[11]*c[14] +c[9]*c[11]*c[18] -c[9]*c[13]*c[16] +c[15] -c[16]*c[19],
-c[5]*c[18] +c[6]*c[17] +c[7]*c[12] -c[7]*c[16] -c[8]*c[12]*c[19] +c[8]*c[15] +c[9]*c[10] -c[9]*c[12]*c[14] +c[9]*c[12]*c[18] -c[9]*c[13]*c[17] -c[17]*c[19],
    -c[5]*c[16] +c[6]*c[15] +c[7]*c[10] -c[8]*c[10]*c[19] -c[9]*c[10]*c[14] +c[9]*c[10]*c[18] -c[9]*c[13]*c[15] -c[15]*c[19]];
TEST_ASSERT(IsHomog(L[1]), false);

g := c[11]*c[14]*c[16]^2*c[17]^2*c[18]^2*c[19]^2 -c[11]*c[14]*c[15]*c[16]*c[17]*c[18]^3*c[19]^2 -c[11]*c[14]*c[16]^3*c[17]*c[18]*c[19]^3 -c[11]*c[14]*c[16]^2*c[17]^3*c[18]*c[19] +c[11]*c[14]*c[15]*c[16]*c[17]^2*c[18]^2*c[19] +2*c[11]*c[14]*c[15]*c[16]^2*c[17]*c[18]*c[19]^2 -c[11]*c[14]*c[15]^2*c[16]*c[17]*c[18]*c[19];
TEST_ASSERT(len(factor(g).factors), 7);

I := ideal(L);

t := CpuTime(); S := saturate(I, ideal(g));
if TEST_PrintInfo then print TimeFrom(t); endif;
TEST_ASSERT(S, I);

--------------------------------------------------------------------
if TEST_PrintInfo then // additional tests
--------------------------------------------------------------------
  
t := CpuTime(); S := saturate(I, ideal(indet(TEST_R, 1)));
if TEST_PrintInfo then print TimeFrom(t); endif;
TEST_ASSERT(S, I);

t := CpuTime(); S := saturate(I, ideal(product(indets(TEST_R))));
if TEST_PrintInfo then print TimeFrom(t); endif;
TEST_ASSERT(S, I);

t := CpuTime(); S := saturate(I*ideal(indets(TEST_R)), ideal(product(indets(TEST_R))));
if TEST_PrintInfo then print TimeFrom(t); endif;
TEST_ASSERT(S, I);

--------------------------------------------------------------------
endif; // additional tests
--------------------------------------------------------------------
